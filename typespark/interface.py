from typing import Any, Optional, Protocol, Union, runtime_checkable, Self

from pyspark.sql import Column


class SupportsGroupedData(Protocol):
    def agg(self, *exprs: Any, **kwargs: Any) -> "SupportsETLFrame": ...
    def count(self) -> "SupportsETLFrame": ...
    def sum(self, *cols: str) -> "SupportsETLFrame": ...
    def avg(self, *cols: str) -> "SupportsETLFrame": ...
    def max(self, *cols: str) -> "SupportsETLFrame": ...
    def min(self, *cols: str) -> "SupportsETLFrame": ...


@runtime_checkable
class SupportsETLFrame(Protocol):
    def select(self, *cols: Union[str, Column]) -> "SupportsETLFrame": ...

    def withColumn(self, colName: str, col: Column) -> "SupportsETLFrame": ...
    def drop(self, *cols: str) -> "SupportsETLFrame": ...
    def union(self, other: Self) -> Self: ...
    def join(
        self,
        other: Any,
        on: Optional[Union[str, list[str], Column]] = None,
        how: Optional[str] = None,
    ) -> "SupportsETLFrame": ...

    def filter(self, condition: Union[str, Column]) -> "SupportsETLFrame": ...
    def groupBy(self, *cols: Union[str, Column]) -> SupportsGroupedData: ...
    def distinct(self) -> "SupportsETLFrame": ...
    def show(
        self, n: int = 20, truncate: bool = True, vertical: bool = False
    ) -> None: ...
